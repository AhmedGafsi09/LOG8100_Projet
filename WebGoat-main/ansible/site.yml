---
- name: Install and Configure Kubernetes Infrastructure
  hosts: azure-vm
  become: yes
  tasks:
    # Installation des prérequis
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
        update_cache: yes
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    # Nouvelle configuration Kubernetes
    - name: Create directory for keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/
        state: present
        filename: kubernetes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Hold Kubernetes packages
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    # Configuration Système
    - name: Disable swap
      command: swapoff -a

    - name: Remove swap from fstab
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+.*)$'
        replace: '# \1'

    # Initialisation Kubernetes
    - name: Initialize Kubernetes cluster
      command: kubeadm init --pod-network-cidr=192.168.0.0/16
      register: kubeadm_init
      ignore_errors: yes

    - name: Create .kube directory
      file:
        path: /home/azureuser/.kube
        state: directory
        owner: azureuser
        group: azureuser

    - name: Copy kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/azureuser/.kube/config
        remote_src: yes
        owner: azureuser
        group: azureuser

    # Installation CNI (Calico)
    - name: Install Calico network
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      become_user: azureuser

    # Installation des outils de monitoring
    - name: Add Helm repository
      command: "{{ item }}"
      loop:
        - helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        - helm repo add grafana https://grafana.github.io/helm-charts
        - helm repo update
      become_user: azureuser

    # Déploiement WebGoat
    - name: Create WebGoat namespace
      command: kubectl create namespace webgoat
      ignore_errors: yes
      become_user: azureuser

    - name: Deploy WebGoat manifests
      command: kubectl apply -f "/root/manifests/{{ item }}"
      loop:
        - resource-quota.yml
        - service-account.yml
        - network-policy.yml
        - health-check.yml
        - deployment.yml
        - service.yml
      become_user: azureuser

    # Installation Prometheus et Grafana
    - name: Create monitoring namespace
      command: kubectl create namespace monitoring
      ignore_errors: yes
      become_user: azureuser

    - name: Install Prometheus
      command: >
        helm install prometheus prometheus-community/kube-prometheus-stack
        --namespace monitoring
        -f ../kubernetes/prometheus-values.yaml
      become_user: azureuser
      ignore_errors: yes

    - name: Install Grafana
      command: >
        helm install grafana grafana/grafana
        --namespace monitoring
        -f ../kubernetes/grafana-values.yaml
      become_user: azureuser
      ignore_errors: yes

    # Vérification
    - name: Wait for pods to be ready
      command: kubectl wait --for=condition=Ready pods --all --all-namespaces --timeout=300s
      become_user: azureuser
      ignore_errors: yes

    - name: Show cluster status
      command: "{{ item }}"
      loop:
        - kubectl get nodes
        - kubectl get pods --all-namespaces
        - kubectl get svc --all-namespaces
      register: cluster_status
      become_user: azureuser

    - name: Display cluster status
      debug:
        var: cluster_status.results

    - name: Get service URLs
      command: kubectl get svc -n monitoring grafana -o jsonpath="{.spec.ports[0].nodePort}"
      register: grafana_port
      become_user: azureuser

    - name: Display access information
      debug:
        msg:
          - "Grafana will be accessible at: http://{{ ansible_host }}:{{ grafana_port.stdout }}"
          - "WebGoat will be accessible at: http://{{ ansible_host }}:30080"
