---
- name: Install and Configure Kubernetes Infrastructure
  hosts: azure-vm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    # Cleanup previous installations
    - name: Remove old Kubernetes sources
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent

    - name: Stop kubelet service
      service:
        name: kubelet
        state: stopped

    - name: Remove Kubernetes directories
      shell: |
        umount -lf /var/lib/kubelet || true
        rm -rf /etc/kubernetes/manifests
        rm -rf /etc/kubernetes/pki
        rm -rf /var/lib/kubelet
        rm -rf /var/lib/etcd
        rm -rf /etc/cni
        rm -rf /var/lib/cni
      ignore_errors: yes

    - name: Clean iptables rules
      shell: |
        iptables -F
        iptables -X
        iptables -t nat -F
        iptables -t nat -X
        iptables -t mangle -F
        iptables -t mangle -X
        iptables -P INPUT ACCEPT
        iptables -P FORWARD ACCEPT
        iptables -P OUTPUT ACCEPT
      ignore_errors: yes

    # Install dependencies
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsof
        update_cache: yes
        state: present

    # Configure Docker
    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg
        mode: '0644'

    - name: Add Docker repository
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Configure Kubernetes
    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Add Kubernetes repository
      shell: |
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list > /dev/null

    - name: Install Docker and Kubernetes packages
      apt:
        name:
          - docker-ce
          - kubelet
          - kubeadm
          - kubectl
          - containerd.io
        update_cache: yes
        state: present

    # Configure Docker daemon
    - name: Configure Docker daemon
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
        dest: /etc/docker/daemon.json

    - name: Create Docker service directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory

    # Disable swap
    - name: Disable swap
      command: swapoff -a

    # Configure kernel modules
    - name: Configure kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: Set system configurations for Kubernetes networking
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    # Configure firewall
    - name: Configure NodePort range using iptables
      shell: |
        iptables -A INPUT -p tcp --dport 30000:32767 -j ACCEPT
        iptables -A OUTPUT -p tcp --sport 30000:32767 -j ACCEPT
      ignore_errors: no

    - name: Allow required ports with UFW
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 22    # SSH
        - 6443  # Kubernetes API

    # Initialize Kubernetes cluster
    - name: Create kubeadm configuration
      copy:
        dest: /etc/kubernetes/kubeadm-config.yaml
        content: |
          apiVersion: kubeadm.k8s.io/v1beta3
          kind: ClusterConfiguration
          networking:
            podSubnet: "192.168.0.0/16"
          criSocket: "unix:///run/containerd/containerd.sock"

    - name: Initialize Kubernetes
      shell: kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs --v=5
      register: kubeadm_init

    - name: Display kubeadm init output
      debug:
        var: kubeadm_init.stdout_lines

    # Configure kubectl for the user
    - name: Set up kubectl for user
      shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config

    # Deploy network plugin
    - name: Deploy Calico CNI
      shell: |
        kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      register: calico_apply

    - name: Display Calico deployment output
      debug:
        var: calico_apply.stdout_lines

    # Verify Kubernetes setup
    - name: Verify control plane components
      shell: kubectl get pods -n kube-system
      register: control_plane_status

    - name: Display control plane status
      debug:
        var: control_plane_status.stdout_lines
