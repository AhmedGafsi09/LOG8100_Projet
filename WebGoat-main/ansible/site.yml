---
- name: Install and Configure Kubernetes Infrastructure
  hosts: azure-vm
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    # Nettoyage des anciens fichiers
    - name: Remove old Kubernetes sources
      file:
        path: /etc/apt/sources.list.d/kubernetes.list
        state: absent

    # Installation des prÃ©requis
    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsof
        update_cache: yes
        state: present

    # Configuration Docker
    - name: Ensure /usr/share/keyrings exists
      file:
        path: /usr/share/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /usr/share/keyrings/docker-archive-keyring.gpg
        mode: '0644'

    - name: Add Docker repository
      shell: |
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

    # Configuration Kubernetes
    - name: Ensure /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present

    - name: Update apt and install packages
      apt:
        name:
          - docker-ce
          - kubelet
          - kubeadm
          - kubectl
          - containerd.io
        update_cache: yes
        state: present

    # Configuration kubelet arguments
    - name: Configure kubelet arguments
      copy:
        content: |
          KUBELET_KUBECONFIG_ARGS="--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          KUBELET_CONFIG_ARGS="--config=/var/lib/kubelet/config.yaml"
          KUBELET_KUBEADM_ARGS="--container-runtime-endpoint=unix:///run/containerd/containerd.sock"
        dest: /etc/default/kubelet
        mode: '0644'

    # Configuration Docker daemon
    - name: Configure Docker daemon
      copy:
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
        dest: /etc/docker/daemon.json

    - name: Create Docker directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory

    - name: Disable swap
      command: swapoff -a

    # Configure kernel modules
    - name: Configure kernel modules
      modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - br_netfilter
        - overlay

    - name: Set system configurations for Kubernetes networking
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.ipv4.ip_forward', value: '1' }

    # Reset and cleanup existing Kubernetes installation
    - name: Reset Kubernetes cluster
      command: kubeadm reset --force
      ignore_errors: yes

    - name: Remove Kubernetes directories
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/kubernetes/manifests
        - /etc/kubernetes/pki
        - /var/lib/kubelet
        - /var/lib/etcd

    - name: Kill processes using port 6443
      shell: |
        lsof -ti:6443 | xargs kill -9 || true
      ignore_errors: yes

    # Ensure PKI directory exists
    - name: Ensure PKI directory exists
      file:
        path: /etc/kubernetes/pki
        state: directory
        mode: '0755'

    # Initialize Kubernetes
    - name: Initialize Kubernetes
      shell: |
        kubeadm init \
          --pod-network-cidr=192.168.0.0/16 \
          --upload-certs \
          --cri-socket=unix:///run/containerd/containerd.sock \
          --v=5 \
          --ignore-preflight-errors=all \
          2>&1 | tee /var/log/kubeadm-init.log
      register: kubeadm_init
      ignore_errors: yes

    - name: Wait for kubeconfig to be generated
      wait_for:
        path: /etc/kubernetes/admin.conf
        timeout: 300

    # Restart kubelet service
    - name: Restart kubelet service
      systemd:
        name: kubelet
        state: restarted
        enabled: yes

    # Verify kubelet logs and configuration
    - name: Check kubelet logs and configuration
      shell: |
        echo "=== Kubelet Logs ==="
        journalctl -u kubelet --no-pager | tail -n 50
        echo "=== Kubernetes Admin Config ==="
        ls -l /etc/kubernetes/admin.conf
      register: kubelet_check

    - name: Display kubelet configuration status
      debug:
        var: kubelet_check.stdout_lines
