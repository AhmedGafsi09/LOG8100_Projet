name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          mvn -f WebGoat-main/pom.xml clean package -DskipTests

      - name: Build Docker Image
        run: docker build -t webgoat:latest ./WebGoat-main

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: webgoat:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          timeout: '30m'
          skip-files: 'home/webgoat/webgoat.jar'
          skip-java-db-update: 'true'
          scanners: 'vuln'

  code-analysis:
    name: SonarQube Code Analysis
    needs: container-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Compile Java code with Maven
        run: |
          mvn -f WebGoat-main/pom.xml clean compile

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=WebGoat
            -Dsonar.projectName=WebGoat
            -Dsonar.java.binaries=WebGoat-main/target/classes

      - name: Check Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Check for Critical Vulnerabilities and Send Discord Alert
        run: |
          CRITICAL_ISSUES=$(curl -s -X GET "https://sonarqube.example.com/api/issues/search?componentKeys=WebGoat&types=VULNERABILITY&severities=CRITICAL&resolved=false" | jq '.total')
          if [ "$CRITICAL_ISSUES" -gt 0 ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content": "ðŸš¨ A critical vulnerability has been detected in the WebGoat project!"}' \
              ${{ secrets.DISCORD_WEBHOOK_URL }}
          fi

  deploy:
    needs: [container-scan, code-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: 'AhmedGafsi09/LOG8100_Projet'
          path: 'LOG8100_Projet'

      - name: Install Prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible kubectl
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube status
          kubectl get nodes

      - name: Set Minikube Context
        run: |
          minikube update-context
          kubectl cluster-info

      - name: Run Ansible Playbook
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible-playbook -i inventory.yml site.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false

      - name: Setup Monitoring
        run: |
          kubectl create namespace monitoring || true

          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

          cat > prometheus-values.yaml << EOF
          alertmanager:
            enabled: true
            config:
              global:
                resolve_timeout: 5m
              route:
                group_wait: 30s
                group_interval: 5m
                repeat_interval: 12h
                receiver: 'discord'
              receivers:
              - name: 'discord'
                webhook_configs:
                - url: '${{ secrets.DISCORD_WEBHOOK_URL }}'
          prometheus:
            prometheusSpec:
              podMonitorSelectorNilUsesHelmValues: false
              serviceMonitorSelectorNilUsesHelmValues: false
          EOF

          helm install prometheus prometheus-community/kube-prometheus-stack \
            -n monitoring \
            -f prometheus-values.yaml

      - name: Wait for Monitoring Stack
        run: |
          kubectl rollout status statefulset/prometheus-prometheus -n monitoring --timeout=300s
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          kubectl get pods -n monitoring
          kubectl get svc -n monitoring

      - name: Verify Access
        run: |
          GRAFANA_PASSWORD=$(kubectl get secret --namespace monitoring grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
          echo "Grafana admin password: $GRAFANA_PASSWORD"
          echo "Prometheus: http://localhost:30090"
          echo "Grafana: http://localhost:30300"
          minikube service list -n monitoring

      - name: Debug Info
        if: always()
        run: |
          kubectl get all -A
          kubectl describe nodes
