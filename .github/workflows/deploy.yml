name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Build with Maven
        run: |
          mvn -f WebGoat-main/pom.xml clean package -DskipTests

      - name: Build Docker Image
        run: docker build -t webgoat:latest ./WebGoat-main

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: webgoat:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          timeout: '30m'
          skip-files: 'home/webgoat/webgoat.jar'
          skip-java-db-update: 'true'
          scanners: 'vuln'

  code-analysis:
    name: SonarQube Code Analysis
    needs: container-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Compile Java code with Maven
        run: |
          mvn -f WebGoat-main/pom.xml clean compile

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=WebGoat
            -Dsonar.projectName=WebGoat
            -Dsonar.java.binaries=WebGoat-main/target/classes

      - name: Check Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Check for Critical Vulnerabilities and Send Discord Alert
        run: |
          if [ "$(curl -s -X GET "https://sonarqube.example.com/api/issues/search?componentKeys=WebGoat&types=VULNERABILITY&severities=CRITICAL&resolved=false" | jq '.total')" -gt 0 ]; then
            curl -X POST -H "Content-Type: application/json" \
              -d '{"content": "A critical vulnerability has been detected in the WebGoat project!"}' \
              https://discord.com/api/webhooks/1310078253767200788/eQM3uF7CWp0On2wrQqDYZAxYoNkYDdppCBU9BibbIL2ZkM-S67MJb9oDNglMOwqss-P0
          fi

  deploy:
    needs: [container-scan, code-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          repository: 'AhmedGafsi09/LOG8100_Projet'
          path: 'LOG8100_Projet'

      - name: Install Prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible kubectl

      - name: Start Minikube
        run: |
          minikube start --driver=docker
          minikube status
          kubectl get nodes

      - name: Set Minikube Context
        run: |
          minikube update-context
          kubectl cluster-info

      - name: Run Ansible Playbook
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible-playbook -i inventory.yml site.yml
        env:
          ANSIBLE_HOST_KEY_CHECKING: false

      - name: Verify Deployment
        run: |
          kubectl get pods -n webgoat
          kubectl get services -n webgoat
          minikube service list

      - name: Deploy Prometheus using Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm install prometheus prometheus-community/kube-prometheus-stack -f WebGoat-main/kubernetes/prometheus-values.yaml

      - name: Deploy Kube-state-metrics
        run: |
          helm install kube-state-metrics prometheus-community/kube-state-metrics -f WebGoat-main/kubernetes/kube-state-metrics-values.yaml

      - name: Deploy Grafana using Helm
        run: |
          helm install grafana prometheus-community/grafana -f WebGoat-main/kubernetes/grafana-values.yaml

      - name: Verify Prometheus and Grafana
        run: |
          kubectl get pods -n monitoring
          kubectl get services -n monitoring
          minikube service list

      - name: Debug Info
        if: always()
        run: |
          kubectl get all -A
          kubectl describe nodes
