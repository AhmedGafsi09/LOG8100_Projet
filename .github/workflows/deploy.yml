name: Deployment

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'AhmedGafsi09/LOG8100_Projet'
          path: 'LOG8100_Projet'

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_PRIVATE_KEY }}" > ~/.ssh/aks-node-1_key.pem
          chmod 600 ~/.ssh/aks-node-1_key.pem
          ssh-keyscan -H 20.63.16.243 >> ~/.ssh/known_hosts

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip kubectl
          pip install --user ansible
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Set up Kubernetes config
        env:
          KUBE_CONFIG: ${{ secrets.KUBECONFIG }}
          KUBE_CLIENT_CERT: ${{ secrets.KUBE_CLIENT_CERT }}
          KUBE_CLIENT_KEY: ${{ secrets.KUBE_CLIENT_KEY }}
        run: |
          mkdir -p $HOME/.kube
          echo "$KUBE_CONFIG" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

          # Validate kubeconfig
          if ! kubectl config current-context &>/dev/null; then
            echo "Failed to get current context, recreating config..."
            cat > $HOME/.kube/config <<EOF
apiVersion: v1
clusters:
  - cluster:
      insecure-skip-tls-verify: true
      server: https://20.63.16.243:6443
    name: kubernetes
contexts:
  - context:
      cluster: kubernetes
      user: kubernetes-admin
    name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: {}
users:
  - name: kubernetes-admin
    user:
      client-certificate-data: ${KUBE_CLIENT_CERT}
      client-key-data: ${KUBE_CLIENT_KEY}
EOF
          fi

          # Verify configuration
          kubectl config view
          kubectl cluster-info

      - name: Test Ansible Connection
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible -i inventory.yml all -m ping -vvv
        env:
          ANSIBLE_HOST_KEY_CHECKING: false

      - name: Initialize Kubernetes Cluster
        run: |
          # Wait for cluster to be ready
          timeout 300 bash -c 'until kubectl get nodes | grep -q "Ready"; do sleep 5; done'

          # Check if CNI is already installed
          if ! kubectl get pods -n kube-system | grep -q "calico"; then
            echo "Installing Calico CNI..."
            curl -L https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml | kubectl apply -f -
            curl -L https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml | kubectl apply -f -

            # Wait for Calico to be ready
            timeout 300 bash -c 'until kubectl get pods -n calico-system | grep -q "Running"; do sleep 5; done'
          fi

      - name: Run Ansible Playbook
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible-playbook -i inventory.yml site.yml -v --forks 10
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/log8100_projet

      - name: Create Namespaces
        run: |
          kubectl create namespace webgoat --dry-run=client -o yaml | kubectl apply -f -
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Applications
        run: |
          cd LOG8100_Projet/WebGoat-main/kubernetes

          # Apply configurations in order
          kubectl apply -f webgoat-deployment.yml
          kubectl apply -f webgoat-service.yml
          kubectl apply -f service-monitor.yml

          # Wait for deployment to be ready
          kubectl rollout status deployment/webgoat -n webgoat --timeout=300s

      - name: Deploy Monitoring Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Install Prometheus with values
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            -f LOG8100_Projet/WebGoat-main/kubernetes/helm-values/prometheus-values.yaml \
            --wait

          # Install Grafana with values
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            -f LOG8100_Projet/WebGoat-main/kubernetes/helm-values/grafana-values.yaml \
            --wait

      - name: Verify Deployment
        run: |
          echo "Checking pod status..."
          kubectl get pods -n webgoat
          kubectl get pods -n monitoring

          echo "Checking services..."
          kubectl get svc -n webgoat
          kubectl get svc -n monitoring

          echo "Checking deployments..."
          kubectl get deployments -n webgoat
          kubectl get deployments -n monitoring

          echo "Checking ingress..."
          kubectl get ingress -A

      - name: Debug Info
        if: failure()
        run: |
          echo "=== Kubernetes Cluster Info ==="
          kubectl cluster-info dump

          echo "=== Pod Logs ==="
          kubectl get pods -n webgoat -o name | xargs -I {} kubectl logs {} -n webgoat

          echo "=== Events ==="
          kubectl get events -A
