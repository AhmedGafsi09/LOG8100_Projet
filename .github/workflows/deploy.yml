name: Deployment
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'AhmedGafsi09/LOG8100_Projet'
          path: 'LOG8100_Projet'

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_PRIVATE_KEY }}" > ~/.ssh/aks-node-1_key.pem
          chmod 600 ~/.ssh/aks-node-1_key.pem

      - name: Install Python and Ansible
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip install --user ansible

      - name: Set up Kubernetes config
        run: |
              mkdir -p $HOME/.kube
              cat > $HOME/.kube/config <<EOF
        apiVersion: v1
        clusters:
        - cluster:
            insecure-skip-tls-verify: true
            server: https://20.63.16.243:6443
          name: kubernetes
        contexts:
        - context:
            cluster: kubernetes
            user: kubernetes-admin
          name: kubernetes-admin@kubernetes
        current-context: kubernetes-admin@kubernetes
        kind: Config
        preferences: {}
        users:
        - name: kubernetes-admin
          user:
            client-certificate-data: "${CLIENT_CERT}"
            client-key-data: "${CLIENT_KEY}"
        EOF
              chmod 600 $HOME/.kube/config
          env:
            CLIENT_CERT: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lJSFE4OU92REdheXN3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRFeU1UVXdNRFV6TWpsYUZ3MHlOVEV5TVRVd01EVTRNekphTUR3eApIekFkQmdOVkJBb1RGbXQxWW1WaFpHMDZZMngxYzNSbGNpMWhaRzFwYm5NeEdUQVhCZ05WQkFNVEVHdDFZbVZ5CmJtVjBaWE10WVdSdGFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDNm55MUwKcHQxZVgyVUxpcWVwb3dBSFBnTThDNG1PNEJNOEtxZWJRRytiUlFEZnJaeTJzeE8yN24xSHdBeGk1emV3ZkpyaApFcnhlbU5FaXJNSk0yK2dYYlcybk5xNUVRdlRnc0dUSTlBTDJCR2s5c0lydU9ydmQ5Q2hkelRjWlNUZUgvT00xCnFFWFhuV3llaUx3aDg4d1F1bnNpTnk3RGhVQlFEbWVrQmZidysyZGIwVlMvYzEySEQzRmd3VEJ3bXRST3BDK3QKSXc4bkM1TDdMWDg4WG1DUnI0cWlXK1RZekMzVVU5VGl0ekswYW5Ka2lqOTlJemY2OEw4QnVuNUtoendvVldxaApLNU1aMnVTQWZsbWlyNldyS1U2MUZIU2ZjdDNqMnl4UVptbUEwOFUrcVR3V1JqSng4Yk1pL1ZabXJLVXp2MzhYCnp1Mmo0TlZTRU5qV0c5OGRBZ01CQUFHalZqQlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkZLbDMrTGpRS29peGR6dwpBRlFQSkh1bUlab0JNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUJsajNLNGZvZld6SFZjS0lQNnJBOUg2ZFRiCmNiN28yTENpVzk0RkJaUDkrd2QxNFFXTU84Vmw5eTJTbHNiV1ZKRkErV0VndlBqZE1PNmw2a3dBSzl1QTRkdzUKSmFKNVFkQnVSOWMvRnZjOHBPWHBSRklMUTRrbzlseGZnVGNuYVdQZkh0RjdFVUV1ZDRrVm5WajRxWFZTZDdEMQpDNmNqT3FOOFZRdUdlSldFemFaZzZ6RTNneXZ4enJhdzlOZ1lKb0JUd1pqN1JBN3BvVFIxTFpxck8wbGdTRXkzCkhsU0NGTFg4eXhMTDhIVW9CbXp6NDBPUlV2WUY1Q00rVGMxRFBiTFNvWW5FQlJidmsza2Z0U3pSbXgxMFVTTloKemhrWHFJSnRvME85TWRYNWNVR1UwUWR3eUJmZDQyUzlQeGVjSU5aaEVDa0poWjVtVjlBMjdjbzBxaHpkCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            CLIENT_KEY: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdXA4dFM2YmRYbDlsQzRxbnFhTUFCejREUEF1Smp1QVRQQ3FubTBCdm0wVUEzNjJjCnRyTVR0dTU5UjhBTVl1YzNzSHlhNFJLOFhwalJJcXpDVE52b0YyMXRwemF1UkVMMDRMQmt5UFFDOWdScFBiQ0sKN2pxNzNmUW9YYzAzR1VrM2gvempOYWhGMTUxc25vaThJZlBNRUxwN0lqY3V3NFZBVUE1bnBBWDI4UHRuVzlGVQp2M05kaHc5eFlNRXdjSnJVVHFRdnJTTVBKd3VTK3kxL1BGNWdrYStLb2x2azJNd3QxRlBVNHJjeXRHcHlaSW8vCmZTTTMrdkMvQWJwK1NvYzhLRlZxb1N1VEdkcmtnSDVab3ErbHF5bE90UlIwbjNMZDQ5c3NVR1pwZ05QRlBxazgKRmtZeWNmR3pJdjFXWnF5bE03OS9GODd0bytEVlVoRFkxaHZmSFFJREFRQUJBb0lCQUJ3Sy8wdDI3NXpXeU9CTApIWmFvSDhEMjJKV1ZSajVwL1huMUR1cU5iRGZ3em9qT0ZkWitZbUFDeG1DWncwSzVhK3poVElTMXhBaVMvaG92Cnk2S3hDTmM4WWxYV0thbW9SaFBkYmNla295MUV6R3V3czYvSXM2Sk9waUl5VEMxSWkwZXNBSmgzaU1jMXFMVEoKNXp0UzN6OUVSbXlGemtrakpON2l5MEFpaFZFQXRFbVBJdlY4RmRhYUpGaXVTUFNpa2phenhibnV1TVhhM1pwaQpjemJiaDlheEI5R3pMVEUxUksxZW9xRE8wdmRPcGwyc3QyNSswbC80ZXRjdERQczYwTWZiODBpR3huTFlpeDU5CmZlMFJwZU0waEJ5MHZXYUpGWS9Pb001WEt2bFZ0cmZFTXUrZWZKSlVGUVZUSDRQSUYxSzhuc1FZQ2IzQVhsa3AK```
        
        
            

      - name: Verify cluster access
        run: |
          kubectl config view --raw
          kubectl cluster-info

      - name: Test Ansible Connection
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible -i inventory.yml all -m ping -vvv

      - name: Run Ansible Playbook
        run: |
          cd LOG8100_Projet/WebGoat-main/ansible
          ansible-playbook -i inventory.yml site.yml -v --forks 10
        env:
          ANSIBLE_HOST_KEY_CHECKING: false
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/log8100_projet

      - name: Check Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Deploy CNI (Calico)
        run: |
          curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/tigera-operator.yaml
          curl -LO https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/custom-resources.yaml
          kubectl apply -f tigera-operator.yaml
          kubectl apply -f custom-resources.yaml

      - name: Deploy Applications
        run: |
          kubectl create deployment webgoat --image=${{ secrets.DOCKER_USERNAME }}/log8100_projet:latest
          kubectl expose deployment webgoat --port=8080 --type=NodePort

      - name: Deploy Monitoring Stack
        run: |
          kubectl create namespace monitoring
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          helm install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --set server.service.type=NodePort

          helm install grafana grafana/grafana \
            --namespace monitoring \
            --set service.type=NodePort \
            --set adminPassword=admin
