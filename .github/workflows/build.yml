name: Build and Analyze with SonarQube

on:
  push:
    branches:
      - main  # Scanner automatiquement à chaque push sur main
  workflow_dispatch:  # Permet de déclencher le workflow manuellement

jobs:
  build:
    name: SonarQube Analysis
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important pour une analyse complète (évite les clones superficiels)

      # Étape 2 : Vérifiez la structure du projet
      - name: Debug repository structure
        run: |
          pwd
          ls -R

      # Étape 3 : Compilez le code Java (si applicable)
      - name: Compile Java code with Maven
        run: |
          mvn -f path/to/your/java/project/pom.xml clean compile

      # Étape 4 : Configurer SonarQube pour analyser le projet
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=WebGoat
            -Dsonar.java.binaries=path/to/your/java/project/target/classes
            -Dsonar.branch.name=main

      # Étape 5 : Vérifier le Quality Gate (optionnel)
      - name: Check Quality Gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
